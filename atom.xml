<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WENCHIH&#39;S BLOG</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-02T03:01:44.870Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WENCHIH CHANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机概论</title>
    <link href="http://example.com/2020/12/02/1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/"/>
    <id>http://example.com/2020/12/02/1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%AE%BA/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:01:44.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h1><a id="more"></a><ul><li><p>计算机：接受使用者输入指令与资料，经由中央处理器的数学与逻辑单元运算处理后，以产生或储存成有用的信息。</p></li><li><p>计算机五大单元：输入单元、输出单元、CPU内部的控制单元、算数逻辑单元与内存</p></li><li><p>CPU：Central Processing Unit，CPU为一个具有特定功能的芯片，里面含有指令集。</p><ul><li>精简指令集(Reduced Instruction Set Computer, RISC)<ul><li>多为ARM架构，多为手机采用</li></ul></li><li>复杂指令集(Complex Instruction Set Computer, CISC)<ul><li>多为AMD、Intel等X86架构，多为个人电脑采用。</li></ul></li><li>X86架构CPU之间的差异<ul><li>二级缓存（L2 Cache）</li><li>命令执行周期</li><li>指令集</li></ul></li><li>位（bit）：指CPU一次读取数据的最大量。<ul><li>一般32位的CPU所能读写的最大数据量大概是4GB。</li></ul></li></ul></li><li><p>电脑分类及应用领域</p><ul><li>超级计算机：国防军事、气象预测、太空科技</li><li>大型计算机：大型企业</li><li>迷你计算机：科学研究、工程分析、工厂流程管理</li><li>工作站：学术研究、工程分析</li><li>微电脑：台式、笔记本</li></ul></li><li><p>计算单位</p><ul><li><p>容量单位</p><ul><li>1字节（Byte）=8比特位（bit）</li></ul><table><thead><tr><th>进位制</th><th>Kilo</th><th>Mega</th><th>Giga</th><th>Tera</th><th>Peta</th><th>Exa</th><th>Zetta</th></tr></thead><tbody><tr><td>二进位</td><td>1024</td><td>1024K</td><td>1024M</td><td>1024G</td><td>1024T</td><td>1024P</td><td>1024E</td></tr><tr><td>十进位</td><td>1000</td><td>1000K</td><td>1000M</td><td>1000G</td><td>1000T</td><td>1000P</td><td>1000E</td></tr></tbody></table></li><li><p>速度单位</p><ul><li>Hz：次数/秒</li><li>网络传输方面常见单位：Mbit/s</li></ul></li></ul></li></ul><h1 id="PC架构与设备组件"><a href="#PC架构与设备组件" class="headerlink" title="PC架构与设备组件"></a>PC架构与设备组件</h1><ul><li>主板<ul><li>北桥：负责连接速度较快的CPU、内存、显卡等（北桥内存控制器现在大多直接整合到CPU中当中）</li><li>南桥：负责连接较慢的设备接口，如硬盘、USB、网卡等</li></ul></li><li>CPU<ul><li>工作频率：外频X倍频<ul><li>外频：CPU与外部组件进行数据传输时的速度</li><li>倍频：CPU内部用来加速工作性能的一个倍数</li><li>超频：提高外频</li></ul></li><li>前端总线速度（Front Side Bus，FSB）：CPU中的内存控制芯片与内存间的传输速度<ul><li>带宽：位宽（每个时钟周期能够传输的数据量）X频率</li><li>字长（word size）：与位宽相似，CPU每次能够处理的数据量</li></ul></li><li>超线程（Hyper-Threading,HT）:将CPU中的寄存器分成两组，可以让程序分别使用。就相当于一个内核分成两个的样子。</li></ul></li><li>内存（Main Memory）<ul><li>RAM<ul><li>动态随机存取内存（Dynamic Random Access Memory,DRAM）<ul><li>双倍数据传输速度（Double Data Rate，DDR）</li></ul></li><li>静态随机存取内存（Static Random Access Memory，SRAM）：在CPU内部加快二级缓存</li><li>CMOS<ul><li>保存当前系统的硬件配置信息和用户设定的某些参数。主板上的一块可读写的并行或串行FLASH芯片，是用来保存BIOS的硬件配置和用户对某些参数的设定。</li><li>记录主板上的重要参数，包括系统时间、CPU电压与频率、各项设备的I/O地址与IRQ等，由于这些数据的记录要用电，因此主板上面才有电池</li></ul></li></ul></li><li>只读存储器（Read Only Memory，ROM）<ul><li>BIOS<ul><li>记录系统硬件的详细信息与启动设备的选择</li><li>写入到主板上某一块flash或EEPROM的程序，它可以在计算机启动的时候执行，以加载CMOS当中的参数，并尝试调用存储设备中的引导程序，进一步进入操作系统当中。</li></ul></li></ul></li></ul></li><li>显卡（Video Graphics Array，VGA）<ul><li>GPU：嵌入显卡里的一个3D加速芯片</li><li>与显示器接口<ul><li>D-Sub（VGA接口）</li><li>DVI</li><li>HDMI：可同时传输影像与声音</li><li>DisplayPort</li></ul></li></ul></li><li>硬盘（disk）<ul><li>物理组成<ul><li>圆形碟片</li><li>机械手臂</li><li>磁头</li><li>主轴马达</li></ul></li><li>数据<ul><li>扇区（sector）：磁盘的最小物理存储单位<ul><li>分区模式<ul><li>MBR（MS-DOS兼容模式）：通过柱面号码来划分</li><li>GPT：通过扇区号码来划分 </li></ul></li></ul></li><li>磁道（track）：同一个同心圆的扇区组合成的园</li><li>柱面（sylinder）：所有碟片上面同一个磁道可以组合成所谓的柱面</li></ul></li><li>固态硬盘（Solid State Disk，SSD）<ul><li>通过闪存直接读写数据</li><li>测试度量单位：每秒读写操作次数（Input/Output Operations Per Second，IOPS）</li></ul></li><li>机械硬盘（Hard Disk Drive，HDD）<ul><li>用驱动马达去转动碟片，会造成严重的读取延迟</li><li>缓冲存储器（缓存）：加速系统的读写性能</li></ul></li></ul></li><li>主板<ul><li>DMI 2.0总线：CPU与南桥的通信管道</li><li>设备<ul><li>I/O地址：每个设备都有自己的地址</li><li>IRQ中断请求（Interrupt）：告知CPU该设备的工作情况，以方便CPU进行工作分配的任务</li></ul></li></ul></li></ul><h1 id="数据表示方式"><a href="#数据表示方式" class="headerlink" title="数据表示方式"></a>数据表示方式</h1><ul><li>字符编码系统<ul><li>一个汉字占两个字节</li><li>万国码：Unicode编码系统，UTF-8</li></ul></li></ul><h1 id="软件程序运行"><a href="#软件程序运行" class="headerlink" title="软件程序运行"></a>软件程序运行</h1><ul><li>操作系统（Operating System，OS）：一组程序，重点在于管理电脑的所有活动以及驱动系统中的所有硬件<ul><li>操作系统内核（Kernel）<ul><li>一直常驻在内存当中</li></ul></li><li>系统调用（system recall）<ul><li>应用程序编程接口（Application Programming Interface，API）</li></ul></li></ul></li><li>应用程序（壳程序，shell）：来调用操作系统操作硬件工作（就是使用程序的过程）  </li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;计算机&quot;&gt;&lt;a href=&quot;#计算机&quot; class=&quot;headerlink&quot; title=&quot;计算机&quot;&gt;&lt;/a&gt;计算机&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux规则与安装" scheme="http://example.com/categories/linux/Linux%E8%A7%84%E5%88%99%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>LINUX</title>
    <link href="http://example.com/2020/12/02/2-LINUX/"/>
    <id>http://example.com/2020/12/02/2-LINUX/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:00:56.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux是什么"><a href="#Linux是什么" class="headerlink" title="Linux是什么"></a>Linux是什么</h1><a id="more"></a><ul><li>Linux就是一组软件,一组操作系统</li><li>Linux是开源,具有可移植性</li><li>软件移植:参考硬件的功能函数并以此修改操作系统程序代码,经过改版后的操作系统能够在另一个硬件平台上运行的过程</li><li>Linux之前,UNIX历史<ul><li>1969年以前(Bell、MIT、GE的Multics系统)<ul><li>批处理型操作系统:输入设备只有读卡机,输出设备只有打印机,用户无法与操作系统互动</li><li>兼容分时系统(Compatible Time-Sharing System,CTSS)<ul><li>让大型主机通过提供数个终端以连接进入主机,利用主机的资源进行运算工作</li><li>终端仅有输入输出功能,并无相关软件与计算能力</li><li>为了强化此功能,1965年前后发起’Multics’计划</li></ul></li></ul></li><li>1969年,Ken Thompson的小型file server system<ul><li>UNIX原型:以汇编语言写出的一组内核程序,同时包括一些内核工具程序,以及一个小小的文件系统</li><li>文件系统:<ul><li>所有程序或系统设备都是文件</li><li>不管程序本身还是附属文件,所写的程序只有一个目的,且要有效的完成目标</li></ul></li></ul></li><li>1973年,Ritchie等人用C语言写出第一个正式UNIX内核<ul><li>C语言为高级语言,与硬件的相关性没有汇编语言大,因此容易被移植</li><li>UNIX强调多人多任务环境,UNIX为专利软件,但在架构上比较开放</li></ul></li><li>1977年,UNIX分支-BSD诞生(Berkeley Software Distribution)<ul><li>可安装在X86硬件架构上面的FreeBSD即是BSD改版而来</li><li>早先UNIX只能与服务器或是大型工作站划上等号</li></ul></li><li>1979年,重要System V架构与版权声明<ul><li>System V第七版UNIX可以支持X86架构的个人计算机</li><li>目前被称为”纯种的UNIX”指的就是System V以及BSD两套软件</li></ul></li><li>1984年<ul><li>X86架构的Minix操作系统开始编写并于两年后诞生<ul><li>Minix用于教学,用户要求和需求可能无法上升到比较高的程度</li></ul></li><li>GNU计划与FSF基金会的成立<ul><li>目的:建立一个自由、开放的操作系统,</li><li>推出免费的GNU软件<ul><li>GNU C Compiler(gcc)</li><li>自由软件基金会(Free Software Foundation,FSF)</li><li>GNU C library</li><li>运行操作系统的基本接口(Bash shell)</li></ul></li></ul></li></ul></li><li>1985年,草拟通用公共许可证(General Public License,GPL)</li><li>1988年,图形用户界面模式XFree86计划<ul><li>XFree86 = X Window System + Free + X86</li><li>图形用户接口(Graphical User Interface,GUI)</li></ul></li><li>1991年,Linus Torvalds用bash,gcc等GNU工具写出一个内核程序</li></ul></li><li>软件分类<ul><li>自由软件:用户可以自由的执行、复制、再发行、学习、修改与强化自由软件,但不可修改授权(GPL)或单纯销售.销售的话必须搭配售后服务与相关手册</li><li>开源软件:无限制,自由软件是开源软件的一种</li><li>闭源软件:仅推出可执行二进制程序</li><li>Freeware:免费软件,Free Ware:自由软件</li><li>Shareware:可试用的付费软件</li></ul></li><li>Linux发展(UNIX-like)<ul><li>POSIX:可移植操作系统接口(Portable Operating System Interface)</li><li>Linux发展,还需要虚拟团队的帮助</li><li>Linux内核版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.10.0-123.e17.x86-64</span><br><span class="line">主版本.此版本.发布版本-修改版本</span><br></pre></td></tr></table></figure><ul><li>3.0版以前<ul><li>主、次版本为奇数:开发中版本</li><li>主、次版本为偶数:稳定版本</li></ul></li><li>3.0版以后<ul><li>主线版本:MainLine</li><li>旧版本<ul><li>结束开发(End of Live,EOL)</li><li>长期维护版本(Longterm)</li></ul></li></ul></li></ul></li><li>Linux发行版:内核+自由软件+文档(工具)+可完全安装程序</li><li>不同Linux发行版的异同<ul><li>相同 <ul><li>标准规范:Linux Standard Base(LSB)</li><li>目录结构标准:File system Hierarchy Standard(FHS)</li></ul></li><li>相异<ul><li>安装软件方式<ul><li>RPM方式:Red Hat、Fedora、SUSE</li><li>DPKG方式:Debian、Ubuntu、B2D</li></ul></li></ul></li></ul></li><li>互联网服务提供商(ISP)</li><li>Tarball(源代码安装包)</li></ul></li></ul><h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><ul><li><strong>兴趣</strong></li><li><strong>成就感</strong></li><li><strong>实践加讨论</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux是什么&quot;&gt;&lt;a href=&quot;#Linux是什么&quot; class=&quot;headerlink&quot; title=&quot;Linux是什么&quot;&gt;&lt;/a&gt;Linux是什么&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux规则与安装" scheme="http://example.com/categories/linux/Linux%E8%A7%84%E5%88%99%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>主机规划与磁盘分区</title>
    <link href="http://example.com/2020/12/02/3-%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    <id>http://example.com/2020/12/02/3-%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:02:21.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux与硬件的搭配"><a href="#Linux与硬件的搭配" class="headerlink" title="Linux与硬件的搭配"></a>Linux与硬件的搭配</h1><a id="more"></a><ul><li>硬件靠驱动运行</li><li>购买硬件时要考虑性价比,和每瓦性能</li><li>磁盘阵列模式(RAID)：利用硬件技术将数个硬盘整合成为一个大硬盘的方法</li><li>各硬件设备在Linux中的文件名<ul><li>在Linux系统中,每个设备都被当成一个文件来对待</li><li>几乎所有的硬件设备文件都在/dev这个目录内</li></ul></li></ul><table><thead><tr><th>设备</th><th>设备在Linux中的文件名</th></tr></thead><tbody><tr><td>SCSI、SATA、USB磁盘驱动器、U盘</td><td>sd[a-p]</td></tr><tr><td>Virtio接口</td><td>vd[a-p]</td></tr><tr><td>软盘驱动器</td><td>fd[0-7]</td></tr><tr><td>打印机</td><td>lp[0-2]</td></tr><tr><td>鼠标</td><td>input/mouse[0-15] (通用)、psaux(ps/2接口)、mouse(当前鼠标)</td></tr><tr><td>CD-ROM、DVD-ROM</td><td>scd[0-1] (通用)、sr[0-1] (通用,Centos较常见)、cdrom(当前CD-ROM)</td></tr><tr><td>磁带机</td><td>ht0(IDE接口)、st0(SATA/SCSI接口)、tape(当前磁带)</td></tr><tr><td>IDE磁盘驱动器</td><td>hd[a-d] (旧系统才有)</td></tr></tbody></table><h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><ul><li>磁盘碟片上面可细分出扇区(sector)与磁道(track)两种单位,其中扇区的物理大小设计有两种,分别是512字节与4K字节</li><li>早期磁盘第一个扇区里面含有的重要信息我们称为MBR(Master Boot Record,主引导记录)格式</li></ul><h2 id="MBR-MS-DOS-与GPT磁盘分区表-GUID-partition-table"><a href="#MBR-MS-DOS-与GPT磁盘分区表-GUID-partition-table" class="headerlink" title="MBR(MS-DOS)与GPT磁盘分区表(GUID partition table)"></a>MBR(MS-DOS)与GPT磁盘分区表(GUID partition table)</h2><ul><li>通常文件系统的最小单位,分区的最小单位：柱面(所有碟片的同一磁道,Cylinder)</li><li>利用参考对照柱面或扇区号码的方式来处理分区</li><li>MBR分区表格式与限制<ul><li>磁盘第一个扇区为512字节,主要存放两个东西<ul><li>主引导记录(MBR)：可以安装启动引导程序,有446字节</li><li>分区表：记录整个硬盘分区的状态,有64字节,最多仅能有四组记录区,每组记录区记录了该区间的起始与结束的柱面号码</li></ul></li><li>硬盘默认分区表只能写入四组分区信息,分为主要(primary)与扩展(extended)分区</li><li>当系统要写入磁盘时,一定会参考磁盘分区表,才嗯那个针对某个分区进行数据的处理</li><li>扩展分区的目的是使用额外的扇区记录分区信息,扩展分区本身并不能被拿来格式化,扩展分区只能有一个</li><li>扩展分区并不是只占一个区块,而是会分布在每个分区的最前面几个扇区来记录分区信息</li><li>由扩展分区分出来的分区,被称为逻辑分区(logical partition),设备名称是由5号开始的</li><li>所以第一个扇区记录的分区表与MBR很重要</li></ul></li><li>GPT磁盘分区表<ul><li>为了兼容所有磁盘,在扇区的定义上,大多会使用所谓的逻辑区块地址(Logical Block Address,LBA)来处理</li><li>LBA0：MBR兼容区块,存储第一阶段的启动引导程序</li><li>LBA1：GPT表头,记录分区表本身位置和大小、备份用的GPT分区放置位置、分区表校验码(CRC32)</li><li>LBA2-33:实际记录分区信息处</li><li>LBA34:实际分区</li><li>LBA33-1：备份区块地址</li></ul></li></ul><h2 id="启动流程中的BIOS与UEFI启动检测程序"><a href="#启动流程中的BIOS与UEFI启动检测程序" class="headerlink" title="启动流程中的BIOS与UEFI启动检测程序"></a>启动流程中的BIOS与UEFI启动检测程序</h2><ul><li>BIOS搭配MBR/GPT的启动流程<ul><li>BIOS是一个写入到主板上的一个固件,计算机主动执行的第一个程序</li><li>CMOS是记录各项硬件参数且嵌入在主板上面的存储器</li><li>开机流程<ul><li>BIOS：启动主动执行的固件,会认识第一个可启动的设备</li><li>MBR：第一个可启动设备的第一个扇区内的主引导记录块,内含启动引导代码</li><li>启动引导程序(boot loader)：一个可读取内核文件来执行的软件<ul><li>提供选项：用户可以直接选择不同的启动选项,这也是多重引导的重要功能</li><li>加载内核文件：直接指向可使用的程序区段来启动操作系统</li><li>转交其他启动引导程序：将启动管理功能转交给其他启动引导程序负责(多重引导)</li></ul></li><li>内核文件：开始启动操作系统</li></ul></li><li>安装多重引导,先安装Windows再安装Linux</li></ul></li><li>UEFI BIOS搭配GPT启动的流程<ul><li>UEFI(Unified extensive Firmware Interface)：统一可扩展固件接口,由C语言编写</li><li>UEFI加入了一个所谓的安全启动(secure boot)功能,需要关闭,才能进入Linux系统</li></ul></li></ul><h2 id="Linux系统最重要的目录树结构"><a href="#Linux系统最重要的目录树结构" class="headerlink" title="Linux系统最重要的目录树结构"></a>Linux系统最重要的目录树结构</h2><ul><li>最重要的就是根目录,由”/“表示</li><li>文件系统与目录树的关系(挂载)<ul><li>就是利用一个目录当成进入点,将磁盘分区的数据放置在该目录下,也就是说进入该目录就可以读取该分区</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux与硬件的搭配&quot;&gt;&lt;a href=&quot;#Linux与硬件的搭配&quot; class=&quot;headerlink&quot; title=&quot;Linux与硬件的搭配&quot;&gt;&lt;/a&gt;Linux与硬件的搭配&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux规则与安装" scheme="http://example.com/categories/linux/Linux%E8%A7%84%E5%88%99%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>安装Centos.md</title>
    <link href="http://example.com/2020/12/02/4-%E5%AE%89%E8%A3%85Centos/"/>
    <id>http://example.com/2020/12/02/4-%E5%AE%89%E8%A3%85Centos/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:02:55.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><a id="more"></a><ul><li>qcow2虚拟磁盘格式:用多少记录多少</li><li>选择安装模式与启动<ul><li>强制使用gpt分区表,在内核参数下添加inst.gpt</li><li>当笔记本安装系统失败时,在内核参数下加入nofb apm=off acpi=off pci=noacpi<ul><li>nofb是取消显卡上面的缓存检测</li><li>APM(Advanced Power Management):早期电源管理模块</li><li>ACPI(Advanced Configuration and Power Interface):最近电源管理模块</li><li>二者都是由硬件本身支持的</li></ul></li></ul></li><li>分区类型<ul><li>标准分区,直谈、常谈的分区</li><li>LVM:这是一种可以弹性增加或缩小文件系统容量的分区,分配固定的容量</li><li>LVM精简配置(Thin Provisioning):高级版,使用多少容量分配多少容量</li></ul></li><li>文件系统<ul><li>ext2/ext3/ext4:3、4文件系统多了日志功能,系统恢复比较快速,随磁盘容量越来越大,ext文件系统有点挡不住了</li><li>swap:磁盘模拟为内存的交换分区,主要存物理内存中较少使用的数据,将空间释放给真正需要的程序</li><li>BIOS Boot:gpt分区表可能会使用的东西</li><li>xfs:格式化较快,对大容量磁盘管理非常好</li><li>vfat:Linux与Windows系统均支持的文件系统类型,可进行数据交换</li></ul></li><li>虚拟机40G分区配置<ul><li>制作gpt分区表,要有BIOS boot分区,2M即可,无挂载点</li><li>建立/boot挂载点的文件系统,1G</li><li>/、swap、/home的设备类型均为LVM<ul><li>修改卷组大小策略为Fixed,30G</li></ul></li><li>建立/挂载点的根目录,10G</li><li>/home,5G</li><li>要点选重新格式化,才能格式化成你所需要的文件系统</li></ul></li><li>内核管理<ul><li>系统分类下KDUMP:一项当系统因为内核问题导致的宕机事件时会将该宕机事件的内存中的数据保存的功能,适合开发者除错</li></ul></li><li>进行电脑前的初配置,包括分区、root密码等,会被记录到/root/anaconda-ks.cfg文件内</li><li>ios镜像刻录的启动盘不仅可以装系统,还可以进行一些恢复、烧机等任务<ul><li>内存压力测试:memtest86<ul><li>Troubleshooting-&gt;Run a memory test</li></ul></li><li>恢复MBR内启动引导程序<ul><li>Troubleshooting-&gt;Rescue a CentOS system</li></ul></li></ul></li></ul><h1 id="多重引导-Linux引导Windows"><a href="#多重引导-Linux引导Windows" class="headerlink" title="多重引导(Linux引导Windows)"></a>多重引导(Linux引导Windows)</h1><ul><li>先分好区:可以用命令来创建分区,用<code>ctrl</code>+<code>alt</code>+<code>F2</code>进入命令行,使用parted命令</li><li>恢复MBR内的启动引导程序与设置多重引导<ul><li>恢复MBR</li><li>在Linux系统下修改启动选项任务</li></ul></li><li>多重引导后续维护<ul><li>在Windows系统中最好将根目录和swap取消挂载,以防不小心在Windows中将其格式化</li><li>Linux系统不能轻易删除,否则Windows也会挂掉的,因为是Linux引导Windows,grub会读取Linux系统的内容</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;安装过程&quot;&gt;&lt;a href=&quot;#安装过程&quot; class=&quot;headerlink&quot; title=&quot;安装过程&quot;&gt;&lt;/a&gt;安装过程&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux规则与安装" scheme="http://example.com/categories/linux/Linux%E8%A7%84%E5%88%99%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>首次登陆与在线求助</title>
    <link href="http://example.com/2020/12/02/5-%E9%A6%96%E6%AC%A1%E7%99%BB%E5%BD%95%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%B1%82%E5%8A%A9/"/>
    <id>http://example.com/2020/12/02/5-%E9%A6%96%E6%AC%A1%E7%99%BB%E5%BD%95%E4%B8%8E%E5%9C%A8%E7%BA%BF%E6%B1%82%E5%8A%A9/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:03:55.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首次登录系统"><a href="#首次登录系统" class="headerlink" title="首次登录系统"></a>首次登录系统</h1><a id="more"></a><ul><li>通常Linux主机都加一个UPS(不间断电源),防止意外断电造成数据毁损</li><li>用户个人家目录都在/home下,/home/用户名/</li><li>重启X Window快捷键:应用程序-&gt;工具-&gt;优化工具-&gt;打字项目,从已禁用改成快捷键</li><li>GNOME默认界面切换的动画功能关闭命令:<code>gsettings set org.gnome.desktop.interface enable-animations false</code></li><li>虚拟机下,最好将屏幕锁定时间改成从不</li><li>X Window与命令行模式切换快捷键:<code>CTRL+ALT+F[1-6]</code><ul><li>一般称命令行界面为终端界面、terminal、console</li><li>终端界面命名:tty1-tty6对应F[1-6]</li><li>一般tty1为图形用户界面</li><li>可输入命令:<code>starx</code>启动图形界面.启动前提<ul><li>没有其他X Window启用</li><li>已经安装X Window,并且X Server能够启动</li><li>最好要有图形管理器:GNOME、KDE或普通TWM等</li></ul></li><li>默认使用图形界面,在后续管理服务的程序中,将graphical.target这个目标服务设置为默认</li><li>命令行模式的欢迎页面信息,可以在/etc/issue文件内自定义修改</li></ul></li><li>注销Linux:<code>exit</code></li></ul><h1 id="命令行模式简介"><a href="#命令行模式简介" class="headerlink" title="命令行模式简介"></a>命令行模式简介</h1><ul><li>~表示家目录</li><li>_闪烁,一般表示光标</li><li>命令模板:<code>command [-options] parameter1 parameter2...</code><ul><li>命令 选项 参数1 参数2</li><li>选项完整名:–符号</li><li>命令太长,可用\进行转义回车键</li></ul></li><li>重要的几个热键<ul><li>[Tab]<ul><li>命令补全、文件补全</li><li>双[Tab]:列出所有可能命令,供你参考</li><li>在安装Bash-completion软件,还可以补全选项和参数</li></ul></li><li>[Ctrl]+C:中断目前程序</li><li>[Ctrl]+D:键盘输入结束(End Of File,EOF或End Of Input),相当于输入exit</li><li>[Shift]+{[Page UP]|[Page Dwon]}:在输出信息中翻页</li></ul></li><li>当执行命令出现<code>command not found</code>错误时,则可能原因为<ul><li>命令不存在,未安装该软件</li><li>用户未把它加入命令查找路径中,修改PATH</li><li>命令错误,打错字</li></ul></li><li>一般命令的输入只在此次登录有效</li></ul><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><ul><li>显示目前所支持的语系:<code>locale</code><ul><li>其中LC_ALL变量为全部数据同步更新,所以可以执行:<code>LC_ALL=zh_CN.utf-8</code>,则locale支持的语系全部更新</li></ul></li><li>显示日期的命令:<code>date</code><ul><li>输出当前时间:<code>date</code></li><li>按自定义格式化输出(此处为+号):<code>date +%Y/%m/%d</code>、<code>date +%H:%M</code></li></ul></li><li>显示日历的命令(calendar):<code>cal</code><ul><li>输出当月日历:<code>cal</code></li><li>输出整年日历:<code>cal [year]</code></li><li>输出某年某月:<code>cal [month] [year]</code></li></ul></li><li>计算器(brief calculator):<code>bc</code><ul><li>默认计算结果精确到个位</li><li>规定精确几位小数:<code>scale=[number]</code></li></ul></li><li>执行命令时,主要有两种情况<ul><li>一种是该命令直接显示结果,然后等待下一个命令输入[5-1]</li><li>一种是进入到该命令的环境,知道结束该命令才回到命令行界面环境[5-2]</li></ul></li><li>echo:打印命令<ul><li>可以打印变量内容:<code>echo $LANG</code>来取得语系数据</li></ul></li></ul><h1 id="Linux系统下的在线求助"><a href="#Linux系统下的在线求助" class="headerlink" title="Linux系统下的在线求助"></a>Linux系统下的在线求助</h1><ul><li>–help<ul><li>介绍该命令大致用法</li><li>常用在协助你查询你曾经使用的命令所具备的选项或参数</li></ul></li><li>man page(manual操作说明):查询相关命令或相关文件<ul><li>[space]空格键可进行翻页</li><li>命令代号及其意义<ul><li>可通过命令<code>man man</code>查看</li></ul></li><li>man page的数据一般是放在/usr/share/man目录里</li><li>用法<ul><li>找有关命令:<code>man -f [command]</code>,相当于<code>whatis</code>命令</li><li>找关键词:<code>man -k [command]</code>,相当与apropos命令</li><li>上面两个特殊命令要使用,必须建立whatis数据库,在root权限下执行命令:mandb</li><li>其他options可根据<code>man --help</code>的提示</li></ul></li></ul></li><li>info page<ul><li>与man page不同,将说明拆分成一个一个段落,弄成超链接的形式</li><li>每个页面称为一个节点</li><li>其文件放置在/usr/share/info目录里</li></ul></li><li>其他有用文件(documents)<ul><li>位置:/usr/share/doc</li><li>存放某服务的说明文件</li></ul></li><li>nano文本编辑器:相关操作里面有说明</li></ul><h1 id="正确关机操作"><a href="#正确关机操作" class="headerlink" title="正确关机操作"></a>正确关机操作</h1><ul><li>因为Linux是多人多任务,所以要掌握正确关机方法,防止损坏数据</li><li>观察系统使用状态<ul><li>看目前有谁在线:<code>who</code></li><li>查看网络联机状态:<code>netstat -a</code></li><li>查看后台执行程序:<code>ps -aux</code></li></ul></li><li>关机命令<ul><li>将数据同步写入磁盘:<code>sync</code></li><li>常用关机:<code>shutdown</code></li><li>重新启动、关机:<code>reboot、halt、poweroff</code></li><li><code>init 0</code>命令也可关机,<code>init 6</code>为重新启动</li></ul></li><li>将身份变成<code>root:su -</code></li><li>目前系统所有服务的管理命令:<code>systemctl</code>,上面的关机命令就是调用这个命令</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;首次登录系统&quot;&gt;&lt;a href=&quot;#首次登录系统&quot; class=&quot;headerlink&quot; title=&quot;首次登录系统&quot;&gt;&lt;/a&gt;首次登录系统&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux规则与安装" scheme="http://example.com/categories/linux/Linux%E8%A7%84%E5%88%99%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件权限与目录配置</title>
    <link href="http://example.com/2020/12/02/6-Linux%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2020/12/02/6-Linux%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:07:43.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h1><a id="more"></a><ul><li>万能天神(root)</li><li>文件拥有者(owner):文件的主人</li><li>用户组(group):进行团队协作</li><li>其他人(others):相当于路人</li><li>用户记录文件<ul><li>所有用户相关信息都记录在/etc/passwd这个文件内</li><li>个人密码记录在/etc/shadow文件内</li><li>所有组名记录在/etc/group文件内</li></ul></li></ul><h1 id="Linux文件权限"><a href="#Linux文件权限" class="headerlink" title="Linux文件权限"></a>Linux文件权限</h1><ul><li>Linux文件属性<ul><li>执行命令:<code>ls -al 目录名</code>查看属性<ul><li>ls是list缩写</li><li>-l是列出所有文件详细的权限与属性</li><li>-a是列出隐藏文件</li></ul></li><li>例子(各字段及其意思):<table><thead><tr><th>dr-xr-xr-x.</th><th>5</th><th>root</th><th>root</th><th>4096</th><th>3月31 09:53</th><th>boot</th></tr></thead><tbody><tr><td>文件类型权限</td><td>链接数</td><td>文件拥有者</td><td>文件所属用户组</td><td>文件大小</td><td>文件最后修改日期</td><td>文件名</td></tr></tbody></table></li></ul></li><li>文件属性各字段意思<ul><li>第一字段代表文件类型与权限<ul><li>例子<table><thead><tr><th>d</th><th>rwx</th><th>rwx</th><th>rwx</th></tr></thead><tbody><tr><td>文件类型</td><td>文件拥有者权限</td><td>文件所属用户组权限</td><td>其他人权限</td></tr></tbody></table></li></ul></li><li>第二字段表示多少文件名链接到此节点</li><li>第三字段表示这个文件或目录的拥有者</li><li>第四字段表示这个文件所属用户组</li><li>第五字段表示文件的容量大小,默认单位Bytes</li><li>第六字段表示文件创建日期或是最近修改的时间</li><li>第七字段为文件名</li></ul></li><li>修改文件属性与权限<ul><li>权限<ul><li>[r]代表可读(read)</li><li>[w]代表可写(write)</li><li>[x]代表可执行(execute)</li><li>没有相应权限就用[-]表示</li></ul></li><li><code>chgrp</code>:修改文件所属用户组<ul><li>要被修改的组名必须要在/etc/group文件中存在</li></ul></li><li><code>chown</code>:修改文件拥有者<ul><li>既可以改文件拥有者也可改用户组,格式:<code>chown user:group file</code>,用冒号隔开</li></ul></li><li><code>chmod</code>:修改文件的权限,SUID、SGID、SBIT等的特性<ul><li><code>chmod 数字 目标文件或目录</code>,数字为相应二进制</li><li><code>chmod [ugoa]+[+-=]+[rwx] 目标文件或目录</code></li></ul></li><li>如果连同目录下所有文件或目录一同修改的话,命令可加入<a href="recursive%E9%80%92%E5%BD%92">-R</a>选项</li><li><code>cp</code>:复制操作<ul><li><code>cp 源文件 目标文件</code>:会连同属性和权限一同复制</li></ul></li></ul></li><li>权限对目录或文件的意义<table><thead><tr><th>组件</th><th>内容</th><th>替代对象</th><th>r</th><th>w</th><th>x</th></tr></thead><tbody><tr><td>文件</td><td>详细数据data</td><td>文件夹</td><td>读到文件内容</td><td>修改文件内容</td><td>执行文件内容</td></tr><tr><td>目录</td><td>文件名</td><td>可分类抽屉</td><td>读到文件名</td><td>修改文件名、删除文件、移动目录内文件、目录</td><td>进入该目录的权限</td></tr></tbody></table></li><li>各用户对自己的家目录有rwx权限</li><li>文件类型<ul><li>常规文件(regular file)<ul><li>用[-]表示</li><li>纯文本文件(ASCLL):可用<code>cat</code>命令读取</li><li>二进制文件(binary):系统认识且可以执行的二进制命令</li><li>数据文件(data):可用<code>last</code>命令读取,程序运行过程读取的数据文件</li></ul></li><li>目录文件(directory):[d]</li><li>链接文件(link file):[l]</li><li>设备与设备文件(device):通常在/dev目录下<ul><li>区块(block)设备文件:[b],一些存储数据,以提供系统随机存取的接口设备,如硬盘、软盘、U盘等</li><li>字符(character)设备文件:[c],一些串行端口的接口设备,如键盘、鼠标等(特色为一次性读取)</li></ul></li><li>数据接口文件(sockets):[s],通常被用在网络上的数据交换,在/run、/tmp目录下常出现这种文件类型</li><li>数据输送文件(FIFO,pipe)<ul><li>[p],first-in-first-out,即管道,常用于多程序读取一个文件</li></ul></li><li>socket与socket与进程(process)有关</li></ul></li><li>常用文件扩展名<ul><li>*.sh:脚本或批处理文件(scripts),用shell写成</li><li><em>Z、</em>.tar、*.tar.gz、*.zip、*.tgz:经过打包的压缩文件,根据不同压缩软件而得名</li><li><em>.html、</em>.php:html语法或php语法的网页文件</li><li>Linux内核常用文件名:vmlinuz</li></ul></li><li>与Windows系统不同,文件是否可执行与是否有x权限和是否有可执行程序代码有关</li><li>Linux文件命名以详细为目的,所以很多文件名很长<ul><li>单一目录或文件名最长为255字节,128个汉字以内</li></ul></li></ul><h1 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h1><ul><li>Linux目录配置依据:FHS(Filesystem Hierarchy Standard)标准</li><li>FHS定义的目录<ul><li>可分享(shareable):能够分享给网络上其他主机挂载的目录</li><li>不可分享(unshareable):自己机器上面运行的设备文件或是与程序有关的socket文件,与自身机器有关,不适合分享</li><li>不变(static):不经常变动,如函数库、文件说明、系统管理员所管理的主机服务配置文件等</li><li>可变动(variable):经常修改的数据,如日志文件、一般用户可自行接受的新闻组</li></ul></li><li>FHS定义的目录树(directory tree)<ul><li>/(root,根目录):与启动系统有关</li><li>/usr(unix software resource):与软件安装/执行有关</li><li>/var(variable):与系统运行过程有关<blockquote><p>1、目录树的起始点为根目录<br>2、每一个目录不止可使用本地分区的文件系统,还可以使用网络上的,可以通过挂载某特定目录来使用<br>3、每一个文件在此目录树中的文件名(包括完整路径)都是独一无二的</p></blockquote></li></ul></li><li>根目录[6-1]<ul><li>FHS要求必须存在的目录<ul><li>/bin:在单人维护模式下还能够被使用的命令,如<code>cat</code>、<code>date</code>、<code>chmod</code>、<code>cp</code>等</li><li>/boot:启动会使用到的文件,包括内核文件、启动选项、启动所需配置文件等</li><li>/dev:任何设备与接口设备存放处</li><li>/etc:系统主要的配置文件几乎存放在此目录,建议不要放置可执行文件(binary)<ul><li>/opt(FHS必要):存放第三方辅助软件/opt的相关配置文件</li><li>/X11(FHS建议):与X window有关的配置文件</li><li>/sgml(FHS建议):与SGML格式有关的各项配置文件</li><li>/xml(FHS建议):与XML格式有关的各项配置文件</li></ul></li><li>/lib:放置在启动时会用到的函数库,以及/bin或/sbin下面的命令会调用的函数库<ul><li>/modules(FHS必要):驱动程序</li></ul></li><li>/media:放置可删除设备,如软盘、光盘、DVD</li><li>/mnt:暂时挂载某些额外设备</li><li>/opt:第三方辅助软件放置的目录</li><li>/run:系统启动后所产生的各项信息,可以使用内存来模拟</li><li>/sbin:启动过程所需要的,包括启动、修复、还原系统所需要的命令,还包括某些服务器软件程序,常见命令包括<code>fdisk</code>、<code>ifconfig</code>等.至于本机自行安装的软件所产生的系统执行文件(system binary),则放置在/usr/local/sbin/当中</li><li>/src:service缩写,一些网络服务启动之后,这些服务所需要使用的数据目录,如/srv/www/</li><li>/tmp:让一般用户或是正在执行的程序暂时放置文件的地方</li><li>/usr</li><li>/var:主要放置变动性的数据</li></ul></li><li>FHS建议可存在的目录<ul><li>/home:用户家目录存放位置</li><li>/lib<qual>:用来存放与/lib不同格式的二进制函数库,如支持64位的/lib64函数库等</li><li>/root:系统管理员(root)的家目录,进入单人维护模式,通过挂载根目录,也能够拥有root家目录,此目录应与根目录放置到同一分区</li></ul></li><li>其他重要目录<ul><li>/lost+found:使用ext234文件系统格式才会产生的一个目录,目的在于当文件系统发生错误时,将一些遗失的片段放置到这个目录下</li><li>/proc:虚拟文件系统(virtual filesystem),如系统内核、进程信息(process)、外接设备的状态及网络状态.此目录下的数据都是在内存当中,本身不占硬盘容量</li><li>/sys:与/proc相似,主要记录内核与系统硬件信息相关的内容.包括目前已加载的内核模块与内核检测到的硬件设备信息等,不占用硬盘容量</li></ul></li><li>五个重要目录必须跟根目录放置在一起:/etc、/bin、/dev、/lib、/sbin</li></ul></li><li>/usr:安装时会占用较大硬盘容量<ul><li>FHS要求必须存在的目录<ul><li>/bin:和根目录/bin是同一个文件,其链接于此</li><li>/lib:和根目录/lib是同一个文件,其链接于此</li><li>/local:安装自己下载的软件</li><li>/sbin:和根目录/sbin是同一个文件,其链接于此</li><li>/share:主要放置只读的数据文件,当然还有共享文件,几乎都是文本文件.几乎不区分硬件架构,都可以读取</li></ul></li><li>FHS建议可存在的目录<ul><li>/games:与游戏相关的数据放置处</li><li>/include:c/c++等程序语言的头文件(header)与包含文件(include)放置处</li><li>/libexec:某些不被一般用户常用的执行文件或脚本(script)等,例如大部分X窗口下面的操作命令</li><li>/lib<qual>:和根目录/lib<qual>是同一个文件,其链接于此</li><li>/src:source,一般源代码放置处</li></ul></li></ul></li><li>/var:在系统运行后才渐渐占用硬盘容量<ul><li>FHS要求必须存在的目录<ul><li>/cache:应用程序本身运行过程中会产生的一些缓存</li><li>/lib:软件运行过程中,需要使用到自己的数据文件,每个软件应有自己的目录</li><li>/lock:链接到根目录/run/lock,某些设备或文件资源只能同时被一个应用使用,则需要给其上锁</li><li>/log:放置日志文件,记录登录信息等</li><li>/mail:放置个人电子游戏,与/spool/mail互为链接文件</li><li>/run:链接到根目录/run,某些程序或服务启动后,会将它们的PID放置在此目录</li><li>/spool:通常放一些队列数据,就是排队等待其他程序使用的数据,被使用后通常被删除</li></ul></li></ul></li><li>路径<ul><li>绝对路径:由根目录开始写起的文件名或目录名称</li><li>相对路径:由当前位置写起的文件或目录名称<ul><li>[.]表示当前目录</li><li>[..]表示上一层目录</li></ul></li><li>执行本目录下的命令文件:<code>./文件名</code></li></ul></li></ul><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul><li><code>uname</code><ul><li>查看内核版本:<code>uname -r</code></li><li>查看操作系统的架构版本:<code>uname -m</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;用户与用户组&quot;&gt;&lt;a href=&quot;#用户与用户组&quot; class=&quot;headerlink&quot; title=&quot;用户与用户组&quot;&gt;&lt;/a&gt;用户与用户组&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux文件、目录与磁盘格式" scheme="http://example.com/categories/linux/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件与目录管理</title>
    <link href="http://example.com/2020/12/02/7-Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2020/12/02/7-Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:08:32.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h1><a id="more"></a><ul><li>相对路径与绝对路径<ul><li>相对:由当前目录写起</li><li>绝对:由根目录/写起</li></ul></li><li>目录的相关操作<ul><li><code>.</code>:代表此层目录</li><li><code>..</code>:代表上一层目录</li><li><code>-</code>:代表前一个工作目录</li><li><code>~</code>:代表目前使用者身份所在的家目录</li><li><code>~account</code>:代表account这个使用者的家目录</li></ul></li><li>处理目录的命令 <ul><li><code>cd</code>:切换目录</li><li><code>pwd</code>:显示当前目录</li><li><code>mkdir</code>:建立一个新目录</li><li><code>rmdir</code>:删除一个空目录</li><li><code>Tab</code>可自动补全目录路径</li><li><code>rm</code>:可删除目录下的所有文件</li></ul></li><li>关于执行文件路径的变量:<code>$PATH</code></li></ul><h1 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h1><ul><li>文件与目录的查看:<code>ls</code></li><li>复制文件或目录:<code>cp</code></li><li>复制、删除与移动:<code>cp</code>、<code>rm</code>、<code>mv</code></li><li>cp命令注意事项<ul><li>是否需要完整的保留源文件的信息</li><li>源文件是否为符号链接文件(symbolic link file)</li><li>源文件是否为特殊的文件,例如FIFO、socket等</li><li>源文件是否为目录</li></ul></li></ul><h1 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h1><ul><li><code>cat</code>由第一行开始显示文件内容(concatenate)</li><li><code>tac</code>从最后一行开始显示,可以看出<code>tac</code>是<code>cat</code>倒着写</li><li><code>nt</code>显示的时候,同时输出行号</li><li><code>more</code>一页一页地显示文件内容</li><li><code>less</code>与<code>more</code>类似,但是比<code>more</code>更好的是,它可以往前翻页</li><li><code>head</code>只看后面几行</li><li><code>od</code>以二进制的方式读取文件内容</li><li>管道符号:<code>|</code></li><li>修改文件时间或创建新文件:<code>touch</code><ul><li>建立一个空文件</li><li>将某个文件日期自定义为目前(mtime与atime)</li></ul></li><li>时间参数<ul><li>修改时间(modification time,mtime):内容修改</li><li>状态时间(status time,ctime):属性修改</li><li>读取时间(access time,atime):打开时间</li></ul></li><li>文件与目录的默认权限与隐藏权限</li></ul><h1 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h1><ul><li>文件默认权限:<code>umask</code><ul><li><code>umask</code>共有四个数字,每个数字表示拿去相应的权限</li></ul></li><li>配置文件隐藏属性:<code>chattr</code><ul><li><code>+a</code>:只能增加数据,不能修改和删除数据</li><li><code>+i</code>:让一个文件不能进行任何操作</li></ul></li><li>显示文件隐藏属性:<code>lsattr</code></li><li>文件特殊权限:SUID、SGID、SBIT</li><li>Set UID(SUID)<ul><li>SUID权限仅对二进制程序有效</li><li>执行者对于该程序需要具有x的可执行权限</li><li>本权限仅在执行该程序的过程中有效</li><li>执行者将具有该程序拥有者的权限</li></ul></li><li>Set GID(SGID)<ul><li>SGID对二进制有用</li><li>程序执行者对于该程序来说,需具备x的权限</li><li>执行者在执行的过程中将会获得该程序用户组的支持</li></ul></li><li>Sticky Bit(SBIT)<ul><li>仅对目录有效</li><li>当用户对此目录有w、x权限,即具有写入的权限</li><li>用户只能够针对自己建立的文件或目录进行删除、更名、移动等操作,而无法删除他人的文件</li></ul></li><li>观察文件类型:<code>file</code></li></ul><h1 id="命令与文件的查找"><a href="#命令与文件的查找" class="headerlink" title="命令与文件的查找"></a>命令与文件的查找</h1><ul><li>脚本文件的查找<ul><li><code>which</code>(查找执行文件)</li><li><code>type</code></li></ul></li><li>文件的查找<ul><li><code>whereis</code>:在一些特定的目录中查找文件</li><li><code>locate</code>:在已建立的数据库/var/lib/mlocate/里面的数据中查找用户所输入关键词的文件名</li><li><code>updatedb</code>:根据/etc/updatedb.conf的设置去查找系统硬盘内的文件,并更新数据库文件</li><li><code>find</code>:全系统查询</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目录与路径&quot;&gt;&lt;a href=&quot;#目录与路径&quot; class=&quot;headerlink&quot; title=&quot;目录与路径&quot;&gt;&lt;/a&gt;目录与路径&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux文件、目录与磁盘格式" scheme="http://example.com/categories/linux/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘与文件系统管理</title>
    <link href="http://example.com/2020/12/02/8-Linux%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2020/12/02/8-Linux%E7%A3%81%E7%9B%98%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:09:22.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识Linux文件系统"><a href="#认识Linux文件系统" class="headerlink" title="认识Linux文件系统"></a>认识Linux文件系统</h1><a id="more"></a><ul><li>文件系统特性<ul><li>超级区块(superblock):记录此文件系统的整体信息,包括inode与数据区块的总量、使用量、剩余量,以及文件系统的格式与相关信息等</li><li>inode:记录文件的属性,一个文件占用一个inode,同时记录此文件的数据所在的区块号码</li><li>数据区块(block):实际记录文件的内容,若文件太大时,会占用多个区块</li></ul></li><li>Linux的ext2文件系统(inode)<ul><li>文件系统格式化时就将inode和数据区块规划好</li><li>inode与数据区块通通放置在一起不容易管理,从而ext2文件系统在格式化的时候就区分为多个区块群组(block group),每个区块群组都有独立的superblock,文件系统描述、区块对应表(block bitmap)、inode对应表(inode bitmap)、inode table,data block</li><li>文件系统最前面有一个启动扇区(boot sector),这个启动扇区可以安装启动引导程序,便于制作出多重引导的环境</li><li>查询ext系列超级区块信息的命令:<code>dumpe2fs</code></li></ul></li><li>与目录树的关系<ul><li>当建立一个目录时,文件系统会分配一个inode与至少一块区块给该目录</li></ul></li><li>ext2/ext3/ext4文件的存取与日志式文件系统的功能<ul><li>inode对照表与数据区块称为数据存放区域,超级区块、区块对照表与inode对照表等区段被称为元数据(metadata)。因为超级区块、区块对照表及inode对照表的数据是经常变动的,每次新增、删除、编辑时都可能会影响到这三个部分的数据,因此称为元数据</li><li>sync:强制将内存中dirty文件写入磁盘</li></ul></li><li>挂载点的意义(mount point)<ul><li>挂载点一定是目录,该目录为进入该文件系统的入口</li></ul></li><li>其他Linux支持的文件系统<ul><li>传统文件系统:ext2、minix、FAT(用vfat模块)、iso9660(光盘)等</li><li>日志式文件系统:ext3、ext4、ReiserFS、Windows’NTFS、IBM’s JFS、SGI’s XFS、ZFS</li><li>网络式文件系统:NFS、SMBFS</li></ul></li><li>Linux VFS(Virtual Filesystem Switch)<ul><li>帮助我们读取、管理文件系统,便于管理、读取文件</li></ul></li><li>XFS文件系统介绍<ul><li>被开发用于高容量磁盘以及高性能文件系统之用</li><li>XFS文件系统在数据的分布:数据区(data section),文件系统活动登录区(log section),实时运行区(realtime section)</li><li>数据区:与区块群组类似,分为多个存储区群组(allocation groups,AG),与ext系统区别就是inode与区块动态产生</li><li>XFS文件系统的描述数据观察:<code>xfs_info</code></li></ul></li></ul><h1 id="文件系统的简单操作"><a href="#文件系统的简单操作" class="headerlink" title="文件系统的简单操作"></a>文件系统的简单操作</h1><ul><li>磁盘与目录的容量<ul><li><code>df</code>:列出文件系统的整体磁盘使用量</li><li><code>du</code>:查看文件系统的磁盘使用量</li><li>硬链接(Hard Link,硬式链接或实际链接)<ul><li>文件名只与目录有关,文件内容与inode有关</li><li>硬链接只是在某个目录下新增一条文件名链接到某inode号码的关联记录而已</li><li>限制:不能跨文件系统、不能链接目录</li></ul></li><li>符号链接(Symbolic Link,亦即是快捷方式)<ul><li>符号链接就是建立一个独立的文件,而这个文件会让数据的读取指向它链接的那个文件的文件名</li></ul></li><li>ln:制作链接文件</li></ul></li></ul><h1 id="磁盘的分区、格式化、检验与挂载"><a href="#磁盘的分区、格式化、检验与挂载" class="headerlink" title="磁盘的分区、格式化、检验与挂载"></a>磁盘的分区、格式化、检验与挂载</h1><ul><li>观察磁盘分区状态<ul><li><code>lsblk</code>:列出系统上所有磁盘列表</li><li><code>blkid</code>:列出设备的UUID等参数(全局唯一标识符:universally unique identifier),UUID可以拿来作为挂载或是使用这个设备或文件系统</li><li><code>parted</code>:列出磁盘的分区表类型与分区信息</li></ul></li><li>磁盘分区:<code>gdisk/fdisk</code></li><li>更新分区表:<code>partprobe</code></li><li>查看内核的分区记录:<code>cat /proc/partitions</code></li><li>磁盘格式化(创建文件系统):make filesystem(mkfs)<ul><li>格式化XFS文件系统:<code>mkfs.xfs</code></li></ul></li><li>XFS文件系统for RAID性能优化(Optional)<ul><li>磁盘阵列:RAID</li><li>分区区块:stripe</li><li>校验磁盘:parity disk</li><li>备用磁盘:spare disk</li></ul></li><li>查询mkfs格式化哪种文件系统:<code>mkfs[tab][tab]</code></li><li>文件系统检验<ul><li>被检查的硬盘分区务必不可挂载到系统上</li><li><code>xfs_repair</code>处理XFS文件系统</li><li><code>fsck.ext4</code>处理ext4文件系统</li></ul></li><li>文件系统挂载与卸载<ul><li>挂载系统:<code>mount</code></li><li>卸载设备文件:<code>umount</code></li><li>挂载光盘时,光盘只有卸载后才能退出</li><li>挂载系统不支持的文件系统时,需要下载相应驱动程序</li><li>重新挂载根目录:<code>mount -o remount,rw,auto /</code></li><li>挂载不特定目录:<code>mount --bind 源目录 目标目录(这个就和硬链接一样)</code></li><li>卸载时可用卸载设备文件名、挂载点,卸载不特定目录时一定要用卸载挂载点</li></ul></li><li>磁盘/文件系统参数的自定义<ul><li><code>mknod</code>:手动处理设备文件</li><li><code>xfs_admin</code>:查询修改XFS文件系统的UUID与Label name</li><li><code>tune2fs</code>:查询修改EXT4文件系统的UUID与Label name</li><li><code>uuidgen</code>:产生新的UUID</li></ul></li></ul><h1 id="设置启动挂载"><a href="#设置启动挂载" class="headerlink" title="设置启动挂载"></a>设置启动挂载</h1><ul><li>启动挂载/etc/fstab及/etc/mtab</li><li>fstab(filesystem table)<ul><li>[设备/UUID等] [挂载点] [文件系统] [文件系统参数] [dump] [fsck]</li><li>第五栏:能否被dump备份命令作用</li><li>第六栏:是否以fsck检验扇区</li></ul></li><li>特殊设备loop挂载(镜像文件不刻录就挂载使用)</li><li>挂载CD/DVD镜像文件<ul><li>挂载时需要mount的特殊参数,就是<code>-o loop</code></li><li>建立大型文件:<code>dd</code></li><li>大型文件格式化:<code>mkfs.xfs</code>必须加上[-f]参数</li></ul></li></ul><h1 id="内存交换分区-swap-之创建-现在对于服务器来说比较重要"><a href="#内存交换分区-swap-之创建-现在对于服务器来说比较重要" class="headerlink" title="内存交换分区(swap)之创建(现在对于服务器来说比较重要)"></a>内存交换分区(swap)之创建(现在对于服务器来说比较重要)</h1><ul><li>使用物理分区创建内存交换分区<ul><li>分区:使用<code>gdisk</code>划分出一个分区,并设置一下system ID=8200</li><li>格式化:<code>mkswap 设备文件名</code></li><li>使用:<code>swapon 设备文件名来启动设备</code></li><li>观察:<code>free</code>可查看物理内存与swap的使用情况;<code>swapon -s</code>可观察目前使用的内存交换分区的设备有哪些</li></ul></li><li>使用文件创建内存交换文件(物理内存不足时)<ul><li>使用<code>dd</code>命令新建文件</li><li>使用<code>mkswap</code>格式化上面产生的文件</li><li>使用<code>swapon</code>来启动设备,<code>swapoff</code>来关闭设备</li><li>注:系统仅会查询区块设备(block device)不会查询文件,所以一些配置文件时,不要用UUID,用设备名,例子:/etc/fstab</li></ul></li></ul><h1 id="文件系统的特殊观察与操作"><a href="#文件系统的特殊观察与操作" class="headerlink" title="文件系统的特殊观察与操作"></a>文件系统的特殊观察与操作</h1><ul><li>利用GNU的<code>parted</code>进行分区操作<ul><li>此命令同时支持MBR/GPT</li><li><code>parted [设备] [命令 [参数]]</code></li><li>命令功能<ul><li>新增分区:<code>mkpart [primary|logical|Extended] [ext4|vfat|xfs] 开始 结束</code></li><li>显示分区:<code>print</code></li><li>删除分区:<code>rm [partition]</code></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;认识Linux文件系统&quot;&gt;&lt;a href=&quot;#认识Linux文件系统&quot; class=&quot;headerlink&quot; title=&quot;认识Linux文件系统&quot;&gt;&lt;/a&gt;认识Linux文件系统&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux文件、目录与磁盘格式" scheme="http://example.com/categories/linux/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件与文件系统的压缩</title>
    <link href="http://example.com/2020/12/02/9-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9/"/>
    <id>http://example.com/2020/12/02/9-%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8E%8B%E7%BC%A9/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T03:10:19.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统常见的压缩命令"><a href="#Linux系统常见的压缩命令" class="headerlink" title="Linux系统常见的压缩命令"></a>Linux系统常见的压缩命令</h1><a id="more"></a><ul><li>常见的压缩文件扩展名<ul><li>*.z:compress程序压缩的文件</li><li>*.zip:zip程序压缩的文件</li><li>*.gz:gzip程序压缩的文件</li><li>*.bz2:bzip2程序压缩的文件</li><li>*.xz:xz程序压缩的文件</li><li>*.tar:tar程序打包的文件,并没有压缩过</li><li>*.tar.gz:tar程序打包的文件,并且gzip压缩</li><li>*.tar.bz2:tar程序打包的文件,并且bzip2的压缩</li><li>*.tar.xz:tar程序打包的文件,并且经过xz的压缩</li></ul></li><li>压缩比:压缩后与压缩文件所占的磁盘空间大小比</li><li><code>gzip zcat/zmore/zless/zgrep</code><ul><li>可以解开compress、zip、gzip等压缩软件压缩的文件</li><li>压缩完后,源文件消失</li></ul></li><li><code>bzip2 bzcat/bzmore/bzless/bzgrep</code> 压缩比比gzip低</li><li><code>xz xzcat/xzmore/xzless//xzgrep</code> 压缩比最低</li></ul><h1 id="打包命令-tar"><a href="#打包命令-tar" class="headerlink" title="打包命令:tar"></a>打包命令:tar</h1><ul><li>压缩:<code>tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称</code></li><li>查询:<code>tar -jtv -f filename.tar.bz2</code></li><li>解压缩:<code>tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</code></li><li>压缩的文件名需要去掉根目录,以防止解压的时候按绝对路径解压</li><li>仅仅解开单一文件:<code>tar -jxv -f filename.tar.bz2 待解开文件名</code></li><li>打包不包括目录中的某些文件:<code>tar -jcv -f filename --exclude=&quot;file&quot; 被压缩的目录</code></li><li>仅备份比某个时刻还要新的文件:<code>加入选项参数[--newer-mtime]</code></li><li>tarfile:只是打包；tarball:也打包也压缩</li><li>备份到磁带中:<code>tar -cv -f 磁带设备名 欲打包的目录</code></li><li>复制数据:利用管道,既打包也解包<code>tar -cvf - 欲复制目录 | tar -xvt -</code></li></ul><h1 id="XFS文件系统的备份与还原"><a href="#XFS文件系统的备份与还原" class="headerlink" title="XFS文件系统的备份与还原"></a>XFS文件系统的备份与还原</h1><ul><li>XFS文件系统备份<code>xfsdump</code><ul><li>功能包括完整备份(full backup)和增量备份(incremental backup)</li><li>仅支持文件系统的备份</li><li><code>xfsdump [-L s_label] [-M m_label] [-l #] [-f 备份文件] 待备份的数据</code></li></ul></li><li>XFS文件系统还原<code>xfsrestore</code><ul><li><code>xfsdump</code>备份的数据只能用<code>xfsrestore</code>命令恢复</li><li>单一文件全系统恢复:<code>xfsrestore [-f 备份文件] [-L s_label] [-s 文件名] 待恢复的目录</code></li><li>通过增量备份文件来恢复系统:<code>xfsrestore [-f 备份文件] -r 待恢复目录</code></li><li>进入交互模式:<code>xfsrestore [-f 备份文件] -i 待恢复目录</code></li></ul></li></ul><h1 id="光盘写入工具"><a href="#光盘写入工具" class="headerlink" title="光盘写入工具"></a>光盘写入工具</h1><ul><li><code>mkisofs</code>:建立镜像文件<ul><li><code>mkisofs [-o 镜像文件] [-Jrv] [-V vol] [-m file] 待备份文件 -graft-point iosdir=systemdir</code></li><li>建立的镜像文件全放在一个目录中(没有使用<code>-graft-point</code>的时候)</li><li><code>rsync</code>可以完整复制所有的权限属性等数据,也能够进行镜像处理</li></ul></li><li><code>cdrecord/wodim</code>:光盘刻录工具</li></ul><h1 id="其他常见的压缩与备份工具"><a href="#其他常见的压缩与备份工具" class="headerlink" title="其他常见的压缩与备份工具"></a>其他常见的压缩与备份工具</h1><ul><li><code>dd</code>:制作文件、备份、读取磁盘设备内容<ul><li><code>dd if=&quot;input_file&quot; of=&quot;output_file&quot; bs=&quot;block_size&quot; count=&quot;number&quot;</code></li><li><code>dd</code>直接读取扇区,备份也是每个扇区去读写,所以产生的文件和原来的大小一样,所以产生的盘不需要格式化</li></ul></li><li><code>cpio</code>:可以备份任何东西,但是需要配合类似与find等可以查找文件的命令<ul><li>备份:<code>cpio -ovcB &gt; [file|device]</code></li><li>还原:<code>cpio -ivcdu &lt; [file|device]</code></li><li>查看:<code>cpio -ivct &lt; [file|device]</code></li></ul></li><li>通过磁带备份还原<ul><li>备份:<code>find / | cpio -ocvB &gt; /dev/st0</code></li><li>还原:<code>cpio -idvc &lt; /dev/st0</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux系统常见的压缩命令&quot;&gt;&lt;a href=&quot;#Linux系统常见的压缩命令&quot; class=&quot;headerlink&quot; title=&quot;Linux系统常见的压缩命令&quot;&gt;&lt;/a&gt;Linux系统常见的压缩命令&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="Linux文件、目录与磁盘格式" scheme="http://example.com/categories/linux/Linux%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%E4%B8%8E%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="http://example.com/2020/12/02/python_note/"/>
    <id>http://example.com/2020/12/02/python_note/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T08:34:25.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pyhton-笔记"><a href="#Pyhton-笔记" class="headerlink" title="Pyhton 笔记"></a>Pyhton 笔记</h1><a id="more"></a><h2 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h2><pre><code>1、字符串变量,定义形式为:name = “字符串”2、整型变量,name = 数字(无引号)3、整型变量与字符串变量的转换为:字符串等于str(整型变量)</code></pre><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><pre><code>ps:name为变量1、name.title()将变量中的每个单词的首字母大写2、upper()lower()将变量中的字母均变成大写或小写3、变量可以直接相加减,例:变量a=变量b+变量c4、删除变量中首或尾的空白,函数为:name.rstrip()、name.lstrip()、name.strip()5、字符串变量.replace(&#39;a&#39;,&#39;b&#39;)；在字符串中,将字串a变为字串b6、检查一个字符串是否包含在另一个中,用if a in b:的形式</code></pre><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><pre><code>ps:由一系列按特定顺序排列的元素组成。你可以创建包含字母表中所有字母、数字0~9或所有家庭成员姓名的列表。其中元素之间可以没有关系0、创建空列表,name=[],索引可用负数,但对insert函数没有用1、字符串和整型变量可以混合存,name=[&#39;fdgf&#39;,3,&#39;4&#39;]2、修改元素:直接恒等式就行,name[i]=&#39;&#39;3、添加元素:添加到末尾列表:name.append(&#39;&#39;);添加到指定位置:name.insert(索引,&#39;&#39;)4、删除元素:del name[i];弹出函数name.pop(),弹出最后元素;弹出指定元素,name.pop(索引);根据元素值删除元素,remove(&#39;&#39;);ps:remove只删除第一个指定的值5、永久性排序,正向name.sort(),反向name.sort(reverse=True);临时排序,sorted(name),返回临时列表,可结合print一同使用6、反转列表,name.reverse()7、列表长度,len(name),返回数字8、数值列表,max(name),sum(name),min(name),返回最大、和、最小值9、列表解析squares = [value**2 for value in range(1,11)],充分缩减代码行,需要勤加练习,value**2是表达式10、切片用法:name[开始x:结束y],范围:[x,y) ps:xy均为索引,可用负数  ps:切片就相当与副本,不与原列表冲突11、全部切片[:],里面啥也没有,可以用来复制列表,例:name1=name[:],这样形成的列表是一个全新的列表,和那么无关系,如果这样:name1=name,则二者是互通的。</code></pre><h2 id="四、元组"><a href="#四、元组" class="headerlink" title="四、元组"></a>四、元组</h2><pre><code>ps:不可修改的列表,如果修改,可以重新定义整个元组1、定义:name=(‘’,‘’) ps:这里是小括号</code></pre><h2 id="五、if-elif-else"><a href="#五、if-elif-else" class="headerlink" title="五、if/elif/else"></a>五、if/elif/else</h2><pre><code>1、用法:if 条件:,or为或,and为且2、特征值包含在列表中 name in names,不包含 name not in names</code></pre><h2 id="六、字典"><a href="#六、字典" class="headerlink" title="六、字典"></a>六、字典</h2><pre><code>ps:一系列键值对,键与值之间用冒号分隔1、定义:name=&#123;‘键’:‘值’&#125;2、删除键值对:del name[&#39;键&#39;]3、用for遍历字典:for 键,值 in name.items():4、字典的键值可以组成一个列表,键:name.keys();值:name.values()5、字典列表:列表中储存字典</code></pre><h2 id="七、input"><a href="#七、input" class="headerlink" title="七、input"></a>七、input</h2><pre><code>ps:文件名就是模块名1、name=input(&#39;文本&#39;)；文本为显示给用户的内容,name为字符串变量2、将输入的字符串变量转为整型变量,用int(name)的形式3、while用法与for相似</code></pre><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><pre><code>1、定义:def 函数名(形参,形参……):   不要忘记冒号2、传递实参:位置参数、关键字参数、默认值(可给形参赋予默认值)3、传递任意数量实参。形参名带*号表示创建一个元组,从而实参数量可以不确定4、传递任意数量关键字实参。形参名带**号表示创建一个字典5、导入函数模块,用(import 文件名)的形式；调用函数使用:(文件名.函数名)的形式6、导入特定的函数,形式:(from 文件名 import 函数1,函数2……)；调用函数时就直接调用就行了7、导用时用as指定别名,给函数指定别名:(from 文件名 import 函数名 as 别名)；给模块指定别名(import 文件名 as 别名)8、导入模块中所有函数形式:(from 文件名 import *)</code></pre><h2 id="九、类"><a href="#九、类" class="headerlink" title="九、类"></a>九、类</h2><pre><code>1、创建类 class ClassName(object): 类名首字母大写,返回一个类的实例2、类分为方法和属性,类可看为结构体,属性可看为变量,方法可看为函数；调用时用(类名.属性/方法)的形式3、类其中一个特殊方法且自动生成 就是__init__(self);每个方法都必须且自动有self这个形参,self指向实例本身4、修改类的属性,可以直接赋值修改,还可以通过方法进行一类的修改5、继承,继承父类的所有属性和方法    形式:    class 子类名(父类名):        def __init__(self,make,model,year):            super().__init__(make,model,year)6、子类就可以重新定义一些特有的属性和方法了7、导入类:from 文件名 import 类名1,类名2……8、导入整个模块:import 文件名；用文件名.类名的形式访问(这种方式比较推荐)9、导入模块中所有类:from 文件名 import *(不推荐,因为有重名风险)10、在一个模块中导入另一个模块,从而形成嵌套缺一不可的情形(根据个人理解进行逻辑嵌套)</code></pre><h2 id="十、文件和异常"><a href="#十、文件和异常" class="headerlink" title="十、文件和异常"></a>十、文件和异常</h2><pre><code>1、文件读入:open(‘文件名.后缀’);函数返回一个对象,需要把他储存在一个变量里2、有open就有close,但有时候把控不好close在什么时候运行好,就引申出关键字with,它可以根据实际情况自动关闭文本文件    用法:with open(‘文件名.后缀’) as 变量名,(此时变量只在with代码块里使用,变量就相当与一行组成一个变量存到列表中去)3、路径(绝对路径、相对路径都可以),Windows下用反斜杠\4、读取文件的全部内容,用.read()5、逐行读取:for 临时变量 in 文本变量,此循环在with代码块下可用6、创建一个包含文件各行内容的列表,用列表变量=文本变量.readlines()的形式7、写入文件    with (文本名,模式选项) as 文本变量:        文本变量.write(要写入的文本)    模式选项:r(默认项,读取模式)；w(写入模式,清空文件再写入)；a(附加模式,添加到文件末尾)；8、处理traceback异常,用 try-except-else 语句,try放可能出现错误语句,except放如何做语句,else放没出现错误时正常运行的语句9、 分析文本,将文本按空格分隔开存到一个单词列表,列表变量.split()10、存储数据。保存数据用json.dump(变量名,文件变量)；读取数据用json.load(文件变量),返回的值存到一个变量中11、重构:将代码划分为一系列完成具体工作的函数。重构让代码更清晰、更易于理解、更容易扩展。</code></pre><h2 id="十一、测试代码"><a href="#十一、测试代码" class="headerlink" title="十一、测试代码"></a>十一、测试代码</h2><pre><code>1、单元测试:用于核实函数的某个方面没有问题；测试用例:是一组单元测试,这些单元测试一起核实函数在各种情形下的 行为都符合要求。2、测试函数,先引入模块unittest,再创建一个继承unittest.TestCase的类,再编写一系列方法对函数不同方面进行测试3、运行文件中的测试,用代码行unittest.main()4、断言方法:认为应该满足的条件是否确实满足； self.assertEqual(a,b),判断a和b是否相等5、掌握各类断言方法assertEqual(a, b)、assertNotEqual(a, b)、assertTrue(x)、assertFalse(x)、assertIn(item,list)、assertNotIn(item,list)6、对于要测试的类,可统一只用方法setUp(),可在setUp() 方法中创建一系列实例并设置它们的属性,再在测试方法中直接使用这些实例。相比于在每个 测试方法中都创建实例并设置其属性,这要容易得多。7、执行测试时,莫忘了代码行unittest.main()</code></pre><h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><pre><code>1、浮点数精度问题:例:0.2+0.1/3\*0.12、import this(python 之禅)3、range()生成数字列表,用法:range(开始数字 x,结束数字 y),范围:[x,y)4、将数字转化为列表,例:name=list(range(开始数字,结束数字))5、生成偶数列表,例:range(2,11,2),表示每次加 26、for 循环使用形式:‘for 变量 in 列表:’,记得每行缩进；7、对于列表的重复项,可用 set(name)去重(重复)8、break、continue、pass break 表示退出此循环；continue 表示重新进入次循环,语句后面的代码省略；pass 仅表示略过此句,后面的代码照常进行</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Pyhton-笔记&quot;&gt;&lt;a href=&quot;#Pyhton-笔记&quot; class=&quot;headerlink&quot; title=&quot;Pyhton 笔记&quot;&gt;&lt;/a&gt;Pyhton 笔记&lt;/h1&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python-Web应用程序</title>
    <link href="http://example.com/2020/12/02/web_note/"/>
    <id>http://example.com/2020/12/02/web_note/</id>
    <published>2020-12-02T02:56:46.000Z</published>
    <updated>2020-12-02T08:34:51.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目笔记-Python-Web应用程序"><a href="#项目笔记-Python-Web应用程序" class="headerlink" title="项目笔记:Python-Web应用程序"></a>项目笔记:Python-Web应用程序</h1><a id="more"></a><h2 id="一、Django入门"><a href="#一、Django入门" class="headerlink" title="一、Django入门:"></a>一、Django入门:</h2><blockquote><p>ll_env为环境名,事先安装好python3</p></blockquote><ul><li>建立虚拟环境:<code>pyhton -m venv ll_env</code></li><li>激活虚拟环境:<code>ll_env\Scripts\activate.bat</code></li><li>停止虚拟环境:<code>ll_env\Scripts\deactivate.bat</code></li><li>安装Django:<code>pip install Django</code></li><li>在Django下新建项目:<code>django-admin.py startproject learning_log .(.表示让新项目使用合适的目录结构)</code></li><li>列目录:<code>dir</code></li><li>创建数据库:<code>python manage.py migrate</code></li><li>运行服务器:<code>python manage.py runserver 端口号(端口号默认为8000)</code></li><li>创建应用程序:<code>python manage.py startapp learning_logs(appname)</code></li><li>models.py储存模型(用来管理数据),激活模型需要在settings.py的元组INSTALLED_APPS把模型目录(appname)加进去</li><li>修改完数据,则需要修改数据库:<ul><li>修改models.py</li><li>执行命令:<code>python manage.py makemigrations learning_logs(形成迁移表)</code></li><li>执行命令:<code>python manage.py migrate(应用迁移)</code></li></ul></li></ul><h2 id="二、Django管理网站"><a href="#二、Django管理网站" class="headerlink" title="二、Django管理网站"></a>二、Django管理网站</h2><ul><li>创建超级用户:<code>pyton manage.py createsuperuser</code></li><li>向网站注册模型:修改admin.py,将我们创建的并且想要注册的模型引入:<ul><li><code>from appname.models import 模型名(类名)</code></li><li><code>admin.site.register(模型名)</code></li></ul></li></ul><h2 id="三、Django-shell"><a href="#三、Django-shell" class="headerlink" title="三、Django shell"></a>三、Django shell</h2><blockquote><p>交互式终端,易于向数据库查询特定信息</p></blockquote><ul><li>打开终端:<code>python manage.py shell </code></li><li>退出终端:<code>ctrl Z</code></li><li>查看用户id<ul><li><code>from django.contrib.auth.models import User</code></li><li><code>for user in User.objects.all():</code><ul><li><code>print(user.username,user.id)</code></li></ul></li></ul></li><li>重置数据库:<code>pyhton manage.py flush</code></li></ul><h2 id="四、创建网页"><a href="#四、创建网页" class="headerlink" title="四、创建网页"></a>四、创建网页</h2><blockquote><ol><li>定义URL、编写视图和编写模板</li><li>每个URL都被映射到特定的视图-&gt;视图函数获取并处理网页所需的数据-&gt;视图函数通常调用一个模板,后者生成浏览器能够理解的网页</li></ol></blockquote><ul><li>映射URL:打开urls.py定义变量urlpatterns列表,包含项目应用程序的URL</li><li>每个urls文件最初引入URL函数和模块</li><li>定义可在管理网站请求所有URL:<code>url(r&#39;^admin&#39;,admin.site.urls)</code></li><li>定义应用程序请求的URL:<code>url(r&#39;&#39;,include((&#39;appname.urls&#39;,&#39;appname&#39;),namespace=&#39;appname&#39;))</code></li><li>定义主页URL:<code>url(r&#39;^$&#39;,view.index,name=&#39;index&#39;)</code>,映射到视图(r表示字符串,^表示字符串起始,$表示字符串结束)</li><li>编写视图views.py:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    return render(原始请求对象request,网页模板&#39;learning_logs&#x2F;index.html&#39;)</span><br></pre></td></tr></table></figure></li><li>建立放模板文件夹(appname文件夹-&gt;templates文件夹-&gt;appname文件夹-&gt;模板文件)</li><li>创建其他网页(实行子模版继承父模板)</li></ul><h2 id="五、用户账户"><a href="#五、用户账户" class="headerlink" title="五、用户账户"></a>五、用户账户</h2><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><ul><li>用户提交信息的页面都是表单,创建表单的最简单方式是使用ModelForm</li><li>函数reverse() 根据指定的URL模型确定URL,导入:<code>from django.urls import reverse</code></li><li>GET请求:只是从服务器读取数据的页面</li><li>POST请求:用户需要通过表单提交信息<h3 id="创建用户账户"><a href="#创建用户账户" class="headerlink" title="创建用户账户"></a>创建用户账户</h3></li><li>创建应用程序users:<code>python manage.py startapp users</code></li><li>创建登陆网页(URL-&gt;视图-模板)<ul><li>URL:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.views import LoginView</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">     url(r&#39;^login&#x2F;$&#39;,LoginView.as_view(),&#123;&#39;template_name&#39;:&#39;users&#x2F;login.html&#39;&#125;,name&#x3D;&#39;login&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>视图:定义的login视图是默认视图,无需修改</li><li>模板:创建模板目录时,一定要将login.html放在registration文件夹,否则会出现网页错误<ul><li>一个应用程序的模板可继承另一个应用程序的模板 <code>&#123;% extends "learning_logs/base.html" %&#125; </code><h3 id="数据关联用户"><a href="#数据关联用户" class="headerlink" title="数据关联用户"></a>数据关联用户</h3></li></ul></li></ul></li><li>限制访问:装饰器(decorator)<code>@login_required</code>,装饰器是为了检查用户是否登录<ul><li>在视图函数前面加上装饰器,即可限制访问</li><li>重定向登陆页面,需要在settings.py文件夹下加入代码:<code>LOGIN_URL = &#39;/users/login/&#39;</code></li></ul></li><li>将模型关联至用户<ul><li><code>from django.contrib.auth.models import User</code></li><li>在最高层模型中加入:<code>owner = models.ForeignKey(User)</code></li></ul></li><li>只显示用户自己的数据:<code>topics = Topic.objects.filter(owner=request.user).order_by(&#39;date_added&#39;)</code>,fliter函数用来获取合适的数据</li><li>保护用户自己的数据<ul><li>导入异常Http404: from django.http import Http404 </li><li>获取当前id的条目:<code>topic = Topic.objects.get(id=topic_id)</code></li><li>判断与请求的id是否一样:topic.owner == request.user,否则raise Http404</li></ul></li><li>将新主题关联到用户:先修改,后保存数据库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_topic &#x3D; form.save(commit&#x3D;False) </span><br><span class="line">new_topic.owner &#x3D; request.user </span><br><span class="line">new_topic.save()</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、页面样式设置"><a href="#六、页面样式设置" class="headerlink" title="六、页面样式设置"></a>六、页面样式设置</h2><ul><li>在虚拟环境下载应用程序django-bootstrap3:pip install django-bootstrap3</li><li>只要有新的应用程序加入,要想应用,就得在settings.py的INSTALL_APPS下添加其代码</li><li>最后就是修改模板.html文件</li></ul><h2 id="七、git初使用"><a href="#七、git初使用" class="headerlink" title="七、git初使用"></a>七、git初使用</h2><h3 id="Ⅰ"><a href="#Ⅰ" class="headerlink" title="Ⅰ"></a>Ⅰ</h3><ul><li>下载:[<a href="https://npm.taobao.org/mirrors/git-for-windows/],%E5%82%BB%E7%93%9C%E5%BC%8F%E5%AE%89%E8%A3%85">https://npm.taobao.org/mirrors/git-for-windows/],傻瓜式安装</a></li><li>配置git,打开git bash<ul><li>输入用户名及电子邮箱(均可虚构)</li><li><code>git config --global user.name &quot;username&quot;</code></li><li><code>git config --global user.mail &quot;username@example.com&quot;</code></li></ul></li><li>项目文件常出现<strong>pycache__文件夹,里面有*.pyc类文件,可在项目中创建.gitignore文件,并添加__pycache</strong>/内容,即可忽略</li><li>git命令一般在cmd内使用,并在仓库所在目录的终端下执行</li><li>git版本号:<code>git --version</code></li></ul><h3 id="Ⅱ"><a href="#Ⅱ" class="headerlink" title="Ⅱ"></a>Ⅱ</h3><ul><li>初始化仓库 <code>git init</code></li><li>检查状态 <code>git status</code></li><li>将文件加入仓库 <code>git add .(.表示未被跟踪的所有文件)</code></li><li>执行初次提交 <code>git commit -m &quot;message(此次操作的名字)&quot; (-m表示记录此次操作)</code></li><li>查看提交历史 <code>git log (内容有操作ID信息;后面加--pretty=oneline表示简洁重要模式输出)</code></li><li>再次提交 <code>git commit -am &quot;message&quot; (-a表示提交所有修改的文件)</code></li><li>撤销修改 <code>git checkout .(恢复到之前最后一次提交的状态)</code></li><li>检出以前的提交 <code>git checkout ID前六个字符(离开分支master,进入分离头指针状态)</code></li><li>回复到以前的指定状态 <code>git reset --hard ID前六个字符</code></li><li>删除仓库 <code>rmdir /s .git(windows系统)</code></li></ul><h2 id="部署学习笔记"><a href="#部署学习笔记" class="headerlink" title="部署学习笔记"></a>部署学习笔记</h2><ul><li>安装git和Hreoku Toolbelt</li><li>在manage.py所在的文件夹下创建:<ul><li>创建包含包列表的文件<code>requirements.txt:pip freeze &gt; requirements.txt</code></li><li>指定Python版本,创建runtime.text,内容为:python-3.7.3</li></ul></li><li>登录:<code>heroku:heroku login</code></li><li>创建项目:<code>heroku create</code></li><li>推送项目到服务器:<code>git push heroku master</code></li><li>核实正确启动服务器进程:<code>heroku ps</code></li><li>在Heroku上建立数据库<ul><li><code>heroku run python manage.py migrate</code></li></ul></li><li>连heroku服务器:<code>heroku run bash</code><ul><li>创建超级用户:<code>python manage.py createsuperuser</code></li></ul></li><li>修改URL名称:<code>heroku apps:rename name</code></li><li>修改settings.py:<code>DEBUG=false</code>,以防被攻击,并修改<code>ALLOWED_HOSTS=[&#39;localhost&#39;]</code>,只允许本地托管该项目</li><li>修改通用模板(自带模板),则必须在settings.py的模板块中修改<code>&#39;DIRS&#39;=[os.path.join(BASE_DIR,&#39;模板地址&#39;)]</code></li><li>使用方法<code>get_object_or_404()</code>来防止引发500错误<ul><li><code>from django.shortcuts import get_object_or_404</code></li><li><code>topic = get_object_or_404(Topic, id=topic_id)</code></li><li>如果请求的主题或条目不存在,就导致404错误(未修改之前是404错误)</li></ul></li><li>设置SECRET_KEY来实现大量的安全协议</li><li>删除项目:<code>heroku apps:destroy --app appname</code></li></ul><h2 id="PS-访问"><a href="#PS-访问" class="headerlink" title="PS:访问"></a>PS:访问</h2><ul><li><a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a> <strong>访问管理网站</strong></li><li><strong>Django模型字段参考</strong></li><li><strong>shell如何查询数据的文档</strong></li><li><strong>Django模板文档</strong></li><li><a href="http://getbootstrap.com/">http://getbootstrap.com/</a> <strong>查看Bootstrap提供的模板</strong></li><li><a href="https://heroku.com/">https://heroku.com/</a> <strong>Heroku官网</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;项目笔记-Python-Web应用程序&quot;&gt;&lt;a href=&quot;#项目笔记-Python-Web应用程序&quot; class=&quot;headerlink&quot; title=&quot;项目笔记:Python-Web应用程序&quot;&gt;&lt;/a&gt;项目笔记:Python-Web应用程序&lt;/h1&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="python-web" scheme="http://example.com/categories/python/python-web/"/>
    
    
    <category term="django" scheme="http://example.com/tags/django/"/>
    
  </entry>
  
</feed>
